<Macro ServerNames $host $domain>

  ServerName $host.$domain
  ServerAlias $domain

  # Create an alias for the bare $domain if $host is "www".
  #
  # This is a horrendous hack to work around the fact that apache's
  # <If> construct can't be used to match strings in a vhost context.
  # Basically: we define a constant with the same value as $host, so
  # long as that constant doesn't already exist. Then we check if the
  # constant "www" is defined, the idea being that if $host is "www",
  # this will return true. Afterwards, we undefine the $host constant
  # if we defined it at all.
  #
  # This works so long as nothing else defines "www".
  #
  # Why bother? That is, why not declare the alias unconditionally?
  # Well, you see... mod_md doesn't like it when multiple vhosts
  # declare the same alias, even though the apache documentation
  # explicitly allows it.
  #
  # Why do it _at all_?
  #
  # Because otherwise we have to manually add "ServerAlias example.com"
  # to every plain-http and https vhost. Each IP/port combination
  # already has a default vhost determined by the order in which they
  # appear in the configuration, and so the "main" vhost goes first
  # anyway. Thus it's convenient if the first vhost is the one
  # that gets priority for the domain alias as well. If not for the
  # mod_md bug, that would happen automatically, since the first
  # occurrence of a ServerAlias takes priority. But in lieu of that,
  # we just use the "www" vhost.
  #
  # Relevant bugs:
  #
  #   * https://bz.apache.org/bugzilla/show_bug.cgi?id=66374
  #   * https://github.com/icing/mod_md/issues/301
  #
  <IfDefine !$host>
    Define $host
    <IfDefine www>
      ServerAlias $domain
    </IfDefine>
    Undefine $host
  </IfDefine>

  # The wildcard in this pattern allows us to ignore missing
  # files. The aliases file should only exist for vhosts that actually
  # have aliases.
  IncludeOptional /etc/apache2/vhosts.d/aliases/$host.$domain.conf*

</Macro>
